drop table customer;
drop table login;
drop table bill;
drop table complaint;

truncate table bill;
---------


CREATE TABLE customer (
    consumerNumber BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1000000000001, INCREMENT BY 1) PRIMARY KEY, 
    customerId BIGINT UNIQUE NOT NULL, 
    title VARCHAR(10) NOT NULL,
    customerName VARCHAR(50) NOT NULL,
    email VARCHAR(30) UNIQUE NOT NULL,
    mobileNumber VARCHAR(15) NOT NULL,
    userId VARCHAR(20) UNIQUE NOT NULL,
    password VARCHAR(25) NOT NULL,
    customerStatus VARCHAR(10) DEFAULT 'Active' CHECK (customerStatus IN ('Active', 'Inactive'))
);


CREATE TABLE login (
    consumerNumber BIGINT PRIMARY KEY, 
    email VARCHAR(30) UNIQUE NOT NULL,
    userId VARCHAR(30) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    userType VARCHAR(10) NOT NULL CHECK (userType IN ('Customer', 'Admin')),
    userStatus VARCHAR(10) DEFAULT 'Active' CHECK (userStatus IN ('Active', 'Inactive')),
    FOREIGN KEY (consumerNumber) REFERENCES customer(consumerNumber)
);

CREATE TABLE bill (
    billId INT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY,
    consumerNumber BIGINT NOT NULL,
    billNumber INT UNIQUE NOT NULL,
    dueAmount DECIMAL(10,2) NOT NULL,
    payableAmount DECIMAL(10,2) NOT NULL,
    totalAmount DECIMAL(10,2) NOT NULL,
    billStatus VARCHAR(10) DEFAULT 'Unpaid' CHECK (billStatus IN ('Paid', 'Unpaid')),
    FOREIGN KEY (consumerNumber) REFERENCES customer(consumerNumber)
);

CREATE TABLE complaint (
    complaintId INT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY,
    consumerNumber BIGINT NOT NULL,
    complaintType VARCHAR(50),
    category VARCHAR(50),
    customerName VARCHAR(50),
    landmark VARCHAR(100),
    problemDescription VARCHAR(250),
    mobileNumber VARCHAR(15),
    address VARCHAR(100),
    complaintStatus VARCHAR(15) DEFAULT 'Open' CHECK (complaintStatus IN ('Open', 'In Progress', 'Closed')),
    FOREIGN KEY (consumerNumber) REFERENCES customer(consumerNumber)
);

CREATE TABLE payment (
    paymentId INT GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY,
    consumerNumber BIGINT NOT NULL,
    cardNumber VARCHAR(16) NOT NULL,
    cardHolder VARCHAR(50) NOT NULL,
    expiryMonth VARCHAR(2) NOT NULL,
    expiryYear VARCHAR(4) NOT NULL,
    cvv VARCHAR(3) NOT NULL,
    totalAmount DECIMAL(10,2) NOT NULL,
    paymentMode VARCHAR(10) NOT NULL,
    transactionDate TIMESTAMP NOT NULL,
    FOREIGN KEY (consumerNumber) REFERENCES customer(consumerNumber)
);



-- Insert Balaji into the customer table
INSERT INTO customer (customerId, title, customerName, email, mobileNumber, userId, password)
VALUES (20001, 'Mr.', 'Balaji', 'balaji@example.com', '9876543211', 'balaji01', 'secretpass');

-- Insert Balaji's login details into the login table
INSERT INTO login (consumerNumber, email, userId, password, userType)
VALUES (1000000000001,'balaji@example.com', 'balaji01', 'secretpass', 'Customer');

-- Insert at least five bill records for Balaji (mix of Paid and Unpaid)

-- Bill 1: Paid
INSERT INTO bill (consumerNumber, billNumber, dueAmount, payableAmount, totalAmount, billStatus)
VALUES (1000000000001, 6001, 500.00, 0.00, 500.00, 'Paid');

-- Bill 2: Unpaid
INSERT INTO bill (consumerNumber, billNumber, dueAmount, payableAmount, totalAmount, billStatus)
VALUES (1000000000002, 6002, 750.00, 750.00, 750.00, 'Unpaid');

-- Bill 3: Unpaid
INSERT INTO bill (consumerNumber, billNumber, dueAmount, payableAmount, totalAmount, billStatus)
VALUES (1000000000003, 6003, 300.00, 300.00, 300.00, 'Unpaid');

-- Bill 4: Paid
INSERT INTO bill (consumerNumber, billNumber, dueAmount, payableAmount, totalAmount, billStatus)
VALUES (1000000000004, 6004, 450.00, 0.00, 450.00, 'Paid');

-- Bill 5: Unpaid
INSERT INTO bill (consumerNumber, billNumber, dueAmount, payableAmount, totalAmount, billStatus)
VALUES (1000000000005, 6005, 600.00, 600.00, 600.00, 'Unpaid');
